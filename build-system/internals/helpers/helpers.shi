# vim: set filetype=sh :
# Internal helper library for the Copacabana build system.
# Meant to be used with Korn Shell 93.
# Copyright (c) 2023 Pindorama
#                    Luiz AntÃ´nio Rangel
# SPDX-Licence-Identifier: NCSA

# Make everyone aware we're running from BUILD_KSH.
export readonly BUILD_KSH=true

# Reads simple Shell-based configuration files.
# "#" is used for comments, and white spaces are ignored for read(1).
function rconfig {
  (sed '/#/d; /^$/d' "$1") \
    | while IFS='=' read identifier value; do
      	eval $(printf '%s=%s' $identifier "$value")
      done
}

# Checks if a function or a variable is defined via its identifier. Analogous
# on purpose to the C preprocessor special operator defined(), meant for being
# used in if conditions.
function defined {
  # First it will check if it's a function defined on the environment and/or in
  # a sourced file, if it's not, then it will check if it is a variable.
  {
    type -t "$1" | grep 'function' 2>&1 > /dev/null \
    || test ! -z "$(eval "echo \$$1")"
  } \
  || return 1
}

# This will be used inside Alambiko's driver.ksh.
# It executes a shell script with its arguments via the running shell.
# If you need to use some variable defined in the pkgbuild or in some build.ksh
# task, export it before calling execscript().
function execscript {
	command="$1";
	shift; command_args=( "$@" )
	( exec "$command "${command_args[@]}"" )
}

# Multiple file input support for realpath(1)
# Basically a boilerplate.
function realpaths {
	files=( ${@} )
	for (( count=0; count < ${#files[@]}; count++ )); do
		realpath "${files[$count]}"
	done
	unset count files
}

# Boilerplate to "cd"
function chdir { cd "$1"; }

# Just a wrapper to a decompressor such as gzip, xz, bzip2 etc.
# Derived from copy2prefix() at https://git.io/mitzune
function c {
  tarball="$2"
	# First, cut the absolute path off
  tarball_ext="${tarball##*/}"
	# Then, the filename itself,
	# we just want the extension.
  tarball_ext="${tarball_ext##*.}"
  case "$tarball_ext" in
    gz|tgz) { gzip "$@"; } ;;
    xz|txz) { xz "$@"; } ;;
    bz2|tbz) { bzip2 "$@"; } ;;
    tar) { shift; cat "$@"; } ;;
    *) printerr "$0: File format not recognized." ;;
  esac
}

# This "generates" wrappers for elevating permissions when needed.
# Be careful.
# Derived from check_doas() at https://git.io/mitzune
function check_elevate_method {
    # Clever way to get UID without having to use id(1) or $UID itself.
    # Check if UID is defined; small fix for using GNU Broken-Again Shell
    # instead of Korn Shell 93, since $UID is read-only on GNU's Shell.
    # We'll be making it public because many scripts will use it later.
    # Using export directly on variable declaration since it would require to
    # use another comparison for knowing if UID is available if we export just
    # at the end. 
    [[ -z $UID ]] && export UID="$(grep $(whoami) /etc/passwd | cut -d: -f3)"

    # Cache the user name from whoami(1) and, unlike $USER, made it read-only
    # to prevent manipulation from overwriting.
    readonly user="$(whoami)"

    if $(grep "$user" /etc/doas.conf &>/dev/null); then
 	function elevate { doas -- "$@"; }
        typeset -fx elevate
    elif $(sudo -v 2>/dev/null); then
        function elevate { sudo -- "$@"; }
        typeset -fx elevate
    elif [[ $UID == 0 ]]; then
        printerr 'Warning: running as root. This isn'\''t recommended.\n'
    elif $(groups $user | grep 'wheel' >/dev/null); then
        printerr \
        'Warning: %s can log directly as root, although using sudo/doas is preferable.\n' \
	"$user"
	function elevate { su -c "$@"; }
        typeset -fx elevate
    else
        printerr 'Fatal: It appears your user doesn'\''t have superuser privileges.\n'
        exit 10
    fi

    export user
}

# Use this function both for errors and warnings
function printerr {
    printf "$@" 1>&2
}
