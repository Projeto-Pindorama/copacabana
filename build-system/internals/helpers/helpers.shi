# vim: set filetype=sh :
# Internal helper library for the Copacabana build system.
# Meant to be used with Korn Shell 93.
# Copyright (c) 2023 Pindorama
#                    Luiz Antônio Rangel
# SPDX-Licence-Identifier: NCSA
#
# "'Liberdade, Igualdade, Fraternidade',
# é o seguinte: se tem Liberdade, tem que
# ter Igualdade, Amor e Fraternidade [...]"

# Make everyone aware we're running from BUILD_KSH.
export readonly BUILD_KSH=true

# Reads INI configuration files, now a boilerplate function
# to dotini/inicompat ---  and, in case of using
# GNU's Broken-Again Shell, it does a coarse conversion of
# the INI file to a simple Shell-based configuration file
# format. 
function rconfig {
	file="$1"

	if [[ -z $BASH && -n $KSH_VERSION ]]; then
		# Load the .ini configuration file as
		# a compound variable to the memory.
		# Simple as that.
		eval conf=$(dotini "$file")
		inicompat conf
	elif [[ -n $BASH ]]; then # BASH
		cat "$1" | \
		for (( ;; )); do
			if read line; then
				if [[ "$line" =~ \[.*\] ]] || [[ "$line" =~ ^$ ]] \
					|| [[ "$line" =~ '^[#;].*$' ]]; then
					continue
				else
					keyval="$(printf '%s' "$line" \
						| sed 's/^\(.*\)[#;].*/\1/;')"
					identifier="${keyval%%=*}"
					value="${keyval##*=}"
					[[ "$keyval" =~ ^$ ]] && continue
					eval $(printf '%s='\''%s'\''' $identifier "$value")
				fi
			else
				break
			fi
		done 
	fi
}

# This function parses .INI files into a compound variable that can be used
# inside the script via eval.
# For example:
#
# eval private_config=$(dotini conf.ini)
# Then you could just access like so:
# printf '%s\n' "${private_config[SectName][KeyName]}"
# It does not outsource record() or map(), so there's more independence and
# flexibility on choosing identifiers for your INI file configuration.
#
# FIXME: When I got time --- or someone else that knows at least a bit of
# KornShell shows up ---, this parser needs to be fixed to support INI files
# that don't explicitly declare a section.
# Sure thing that second-rate hacks such as creating a default section called
# "global" were already thought of, so the ideal is to have just what is being
# described in the code.
# I could fix this in some hours, but I'm willing to work more on the rest of
# the build system instead of just some isolate functions that are already
# compliant with its needs.
#
# FIXME: Also it would be helpful to support files that use spaces between the
# identifier and value, for example:
#
# [sectname]
# keyname = value
# keyname_2 = "Another value"
#
# Being optimistic and careless about using shell built-ins (read as "read")
# instead of manipulating the string utilizing just KornShell's repetition
# control structures, this could be done just like it was done before at the
# old rconfig() function.
function dotini {
	file="$1"

	# The function shall fail before "allocating" anything in memory.
	# This may sound like a worry that a C programmer might have, but it's
	# just a formality when the topic are ksh-ish languages such as
	# GNU's Bash or even ksh93 itself.
	if [[ ! -e "$file" ]]; then
		panic '%s: file %s does not exist.\n' $0 "$file"
	fi

	# Allocate an array for recording the file and declarate a
	# integer that represents the number of the line.
	typeset -a inibuf confline[2]
	integer nl l s nconf 

	# First of all, we shall remove comments.
	# I know this could be done manually using a for-loop, but I think sed
	# can be more reliable.
	(sed 's/^\(.*\)[#;].*/\1/; /^[#;].*$/d; /^$/d' "$file") | \
	for ((nl=0 ;; nl++)); do
		if read line; then
			inibuf[$nl]="$line"
		else
			break
		fi
	done

	# Open compound variable syntax
	printf '%c' '('
	for ((l=0; l < ${#inibuf[@]}; l++)); do
		line="${inibuf[l]}"
	
		# This gets the INI section.
 		if section_title="$(rematch "$line" '\[\(.*\)\]')"; then
			# The formatted section title.
			formatted_section="$(printf '%s' "$section_title" \
				| nawk '{ gsub(" ", "_"); print(tolower($0)) }')"
			# We can procceed to the next line.
			continue
		fi

		nconf=0
		for ((s=0; s < ${#line}; s++ )); do
			q="${line:s:1}"
			# A value declaration in INI follows the format:
			# identifier = "value"
			# Or
			# identifier=value
			# confline[1]=identifier
			# confline[2]=value

			if [[ "$q" == '=' ]]; then
				((nconf+= 1 ))
				continue
			fi

			confline[$nconf]+="$q"
		done

		# If there is not a section, it will only declare the INI
		# variable and its value on the compound variable.
		if [[ ! -n $formatted_section ]]; then
			# Using a apostrophe instead of quotations marks
			# because, apart from the fact that it works as a
			# micro-optimization --- since the shell will be
			# treating its contents as vulgar strings instead of
			# trying to interpret what is inside them ---, also
			# prevents globbing of strings.
			# The only thing that it doesn't prevents,
			# unfortunately, is the abuse of subshells or malicious
			# substitutions, but I do not think this can be a
			# problem here. 
			printf '%s='\''%s'\'' ' \
			"${confline[0]}" "${confline[1]}"
			
			# Continue to the next line.
			continue
		fi

		# If it there's a section and the value declaration was already
		# parsed, return it as a associative array declaration.
		printf '[%s]+=([%s]='\''%s'\'') ' \
		$formatted_section "${confline[0]}" "${confline[1]}"

		# Clean confline[] array.
		unset confline[0] confline[1]
	done

	# Close compound variable
	printf '%c' ')'
}

# This function "converts" a compound variable generated from a .ini file via
# dotini() to the format "IDENTIFIER=VALUE".
# It can be useful if the program had just implemented .ini files as a way of
# configuration and developers doesn't want to mess with the entire source code.
# It takes the compound variable identifier as a input, for example:
#
# inicompat conf
#
# NOTE: See dotini()'s first "FIXME" and then implement a way to do it. 
function inicompat {
	nameref inirecord=$1
	integer s k
	typeset -a sections

	sections=( ${!inirecord[@]} )

	for ((s=0; s<${#sections[@]}; s++ )); do
		typeset -a confkeys

		section=${sections[s]}
		confkeys=( ${!inirecord[$section][@]} )

		for (( k=0; k < ${#confkeys[@]}; k++ )); do
			confkey=${confkeys[$k]}
			confval="${inirecord[$section][$confkey]}"

			eval $(printf '%s=%s' $confkey "$confval")
			unset confkey confval
		done
		unset section confkeys confkey confval
	done
}

# This function writes everything in a program output to a file passed as a
# parameter, else it also writes it to the standard output using tee(1).
# Sure thing you still need to pass 2>&1 before the pipe to 'logto [file]'.
function logto {
	file="$1"
	# Do not be scared, just a boolean having a rendezvous with a
	# more compact alternative to if-else statements.
	c29waGlhZmljYWNvbWlnbwo=$I_ENJOY_THAT_THINGS_ARE_REALLY_CLEAR
	{ $c29waGlhZmljYWNvbWlnbwo && tee "$file"; } \
		|| { cat - >> "$file"; }
}

# map() and record() functions below.
# For the "back-end" implementation, see __record(),
# with the old Bourne/POSIX shell function prototype.
#
# map(): Creates an associative array with identifier,
# variable name and value as its parameters.
# It's really similar to the code found on herbiec in
# this sense, but it was originally used as a "pointeroid"
# for accessing an A.S.T.
function map {
	identifier="$1"
	variable="$2"
	value="$3"

	eval $(__record "$identifier" "$variable" "$value")
}

# record(): And this creates a compound variable, which
# approachs more a Pascal record than the "old" record()
# --- that was renamed to "map" (as-in Google Go's maps,
# but weakly typed).
function record {
	identifier="$1"
	variable="$2"
	value="$3"

	eval $(__record "$identifier" "$variable" "$value")
}

# Using the good old Bourne function prototype because it permits that the
# function caller name "escapes" into it.
# This is broken in GNU's Broken-Again Shell --- well, maybe I'm repeating
# this joke too many times, but Bash lives up to its nickname --- but this
# is no problem for now since Bash doesn't support compound variables,
# just associative arrays, so both "map" and "record" can be the same to Bash.
__record() {
	# "London calling to the faraway towns...
	# But it wasn't my love...
	# Is she still upset with me?"
	whos_calling="$0"
	identifier="$1"
	variable="$2"
	value="$3"

	# The only thing that changes between record() and map() is the printf
	# format before evaluating it into the script.
	if [[ "$whos_calling" == 'record' ]]; then
		format='%s+=(%s="%s")'
	elif [[ "$whos_calling" == 'map' ]]; then
		format='%s+=([%s]="%s")'
	else
		panic '%s: invalid caller '%s'.\n' \
		"record()/map() backend" "$whos_calling"
	fi

	# Hope this works.
	printf "$format" "$identifier" "$variable" "$value"
}

# Luiz' stupid (re)match.
# It's my attempt on mimicking BASH_REMATCH functionality
# on pretty much any shell. Made it for using on dotini(),
# but pretty much anyone can adapt this.
function rematch {
	# Input string.
	s="$1"

	# Regular expression "rule", as a filter.
        re="$2"

	# If $re is empty, just exit without questions.
	[[ ! -n	"$re" ]] && return 0

	# This gets rid of the capture group syntax that we will be using again
	# on sed. egrep(1) could also be used, but I opted for shell built-ins
	# since we're already on Korn Shell.
	[[ "$s" =~ $(printf '%s' "$re" | sed 's/\\(//; s/\\)//') ]] || return 1 

	printf '%s' "$s" | sed "s/$re/\1/"
}

# Checks if a function or a variable is defined via its identifier. Analogous
# on purpose to the C preprocessor special operator defined(), meant for being
# used in if conditions.
function defined {
  # First it will check if it's a function defined on the environment and/or in
  # a sourced file, if it's not, then it will check if it is a variable.
  {
    type -t "$1" | grep 'function' 2>&1 > /dev/null \
    || test ! -z "$(eval "echo \$$1")"
  } \
  || return 1
}

# Multiple file input support for realpath(1)
# Basically a boilerplate.
function realpaths {
	files=( ${@} )
	for (( count=0; count < ${#files[@]}; count++ )); do
		realpath "${files[$count]}"
	done
	unset count files
}

# Boilerplate to "cd"
function chdir { cd "$1"; }

# Just a wrapper to a decompressor such as gzip, xz, bzip2 etc.
# Derived from copy2prefix() at https://git.io/mitzune
function c {
  tarball="$2"
	# First, cut the absolute path off
  tarball_ext="${tarball##*/}"
	# Then, the filename itself,
	# we just want the extension.
  tarball_ext="${tarball_ext##*.}"
  case "$tarball_ext" in
    gz|tgz) { gzip "$@"; } ;;
    xz|txz) { xz "$@"; } ;;
    bz2|tbz) { bzip2 "$@"; } ;;
    tar) { shift; cat "$@"; } ;;
    *) printerr "$0: File format not recognized." ;;
  esac
}

# This "generates" wrappers for elevating permissions when needed.
# Be careful.
# Derived from check_doas() at https://git.io/mitzune
function check_elevate_method {
    # Clever way to get UID without having to use id(1) or $UID itself.
    # Check if UID is defined; small fix for using GNU Broken-Again Shell
    # instead of Korn Shell 93, since $UID is read-only on GNU's Shell.
    # We'll be making it public because many scripts will use it later.
    # Using export directly on variable declaration since it would require to
    # use another comparison for knowing if UID is available if we export just
    # at the end. 
    [[ -z $UID ]] && export UID="$(grep $(whoami) /etc/passwd | cut -d: -f3)"

    # Cache the user name from whoami(1) and, unlike $USER, made it read-only
    # to prevent manipulation from overwriting.
    readonly user="$(whoami)"

    if $(grep "$user" /etc/doas.conf &>/dev/null); then
 	function elevate { doas -- "$@"; }
        typeset -fx elevate
    elif $(sudo -v 2>/dev/null); then
        function elevate { sudo -- "$@"; }
        typeset -fx elevate
    elif [[ $UID == 0 ]]; then
        printerr 'Warning: running as root. This isn'\''t recommended.\n'
    elif $(groups $user | grep 'wheel' >/dev/null); then
        printerr \
        'Warning: %s can log directly as root, although using sudo/doas is preferable.\n' \
	"$user"
	function elevate { su -c "$@"; }
        typeset -fx elevate
    else
        printerr 'Fatal: It appears your user doesn'\''t have superuser privileges.\n'
        exit 10
    fi

    export user
}

# Use this function both for errors and warnings
function printerr {
    printf "$@" 1>&2
}

# And use this for fatal errors, it will exit the script.
function panic {
	msgbuf="$(printf "$@")"
	printf 1>&2 'panic: %s' "$msgbuf"
	exit 255 
}
